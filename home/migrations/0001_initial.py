# Generated by Django 3.2.4 on 2022-07-24 02:55

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import home.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('send_review_email', models.BooleanField(default=True)),
                ('from_ourumd', models.BooleanField(default=False)),
                ('username', models.CharField(error_messages={'required': 'You must enter a username', 'unique': 'A user with that username already exists.'}, help_text='Once a username is set, it cannot be changed.', max_length=22, unique=True, validators=[django.core.validators.RegexValidator('^[\\w\\d]+$', 'Username can only contain alphanumeric characters and underscores'), django.core.validators.MaxLengthValidator(22, 'Username must be less than 20 characters'), django.core.validators.MinLengthValidator(2, 'Username must be at least 2 characters')])),
                ('email', models.EmailField(blank=True, error_messages={'unique': 'A user with that email already exists. If you forgot your <br /> password, please <a href="" data-toggle="modal" data-target="#password-reset-modal" style="color: red;"> <strong>reset your password</strong></a> or login on the left.'}, max_length=254, null=True, unique=True, validators=[django.core.validators.EmailValidator()])),
                ('password', models.CharField(error_messages={'required': 'You must enter a password'}, max_length=128, validators=[django.core.validators.MinLengthValidator(8, 'Password must be at least 8 characters')])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', home.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.TextField()),
                ('summary', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'home_audit_log',
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department', models.CharField(max_length=4)),
                ('course_number', models.CharField(max_length=6)),
                ('name', models.CharField(max_length=10)),
                ('title', models.TextField(null=True)),
                ('credits', models.IntegerField(null=True)),
                ('description', models.TextField(null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'default_manager_name': 'unfiltered',
            },
            managers=[
                ('unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('url', models.TextField()),
                ('alt_text', models.TextField()),
                ('image_file_name', models.TextField(null=True)),
                ('width', models.IntegerField(null=True)),
                ('height', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Professor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(max_length=100, null=True, unique=True)),
                ('type', models.CharField(choices=[('professor', 'Professor'), ('TA', 'TA')], max_length=50)),
                ('status', models.CharField(choices=[('verified', 'Verified'), ('pending', 'Pending'), ('rejected', 'Rejected')], default='pending', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'default_manager_name': 'unfiltered',
            },
            managers=[
                ('unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ProfessorSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('professor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='home.professor')),
            ],
            options={
                'db_table': 'home_professor_section',
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('semester', home.models.SemesterField()),
                ('section_number', models.CharField(max_length=8)),
                ('seats', models.PositiveIntegerField()),
                ('available_seats', models.PositiveIntegerField()),
                ('waitlist', models.PositiveIntegerField()),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.course')),
                ('professors', models.ManyToManyField(through='home.ProfessorSection', to='home.Professor')),
            ],
        ),
        migrations.CreateModel(
            name='UserSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('semester', home.models.SemesterField()),
                ('loadtime', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('section', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='home.section')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'home_user_schedule',
            },
        ),
        migrations.CreateModel(
            name='SectionMeeting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('days', models.TextField()),
                ('start_time', models.TextField()),
                ('end_time', models.TextField()),
                ('building', models.TextField(null=True)),
                ('room', models.TextField(null=True)),
                ('type', models.TextField(null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.section')),
            ],
            options={
                'db_table': 'home_section_meeting',
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('rating', models.IntegerField()),
                ('grade', models.CharField(blank=True, choices=[('A+', 'A+'), ('A', 'A'), ('A-', 'A-'), ('B+', 'B+'), ('B', 'B'), ('B-', 'B-'), ('C+', 'C+'), ('C', 'C'), ('C-', 'C-'), ('D+', 'D+'), ('D', 'D'), ('D-', 'D-'), ('F', 'F'), ('P', 'P'), ('W', 'W'), ('XF', 'XF')], max_length=2, null=True)),
                ('status', models.CharField(choices=[('verified', 'Verified'), ('pending', 'Pending'), ('rejected', 'Rejected')], default='pending', max_length=50)),
                ('anonymous', models.BooleanField()),
                ('from_ourumd', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='home.course')),
                ('professor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.professor')),
                ('updater', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updater', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'default_manager_name': 'unfiltered',
            },
            managers=[
                ('unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ResetCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reset_code', models.CharField(max_length=100)),
                ('expires_at', models.DateTimeField()),
                ('invalid', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'home_reset_code',
            },
        ),
        migrations.AddField(
            model_name='professorsection',
            name='section',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.section'),
        ),
        migrations.CreateModel(
            name='ProfessorCourse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recent_semester', home.models.SemesterField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.course')),
                ('professor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.professor')),
            ],
            options={
                'db_table': 'home_professor_course',
            },
        ),
        migrations.CreateModel(
            name='Grade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('semester', home.models.SemesterField()),
                ('section', models.CharField(max_length=10)),
                ('num_students', models.PositiveIntegerField()),
                ('a_plus', models.PositiveIntegerField(db_column='APLUS')),
                ('a', models.PositiveIntegerField(db_column='A')),
                ('a_minus', models.PositiveIntegerField(db_column='AMINUS')),
                ('b_plus', models.PositiveIntegerField(db_column='BPLUS')),
                ('b', models.PositiveIntegerField(db_column='B')),
                ('b_minus', models.PositiveIntegerField(db_column='BMINUS')),
                ('c_plus', models.PositiveIntegerField(db_column='CPLUS')),
                ('c', models.PositiveIntegerField(db_column='C')),
                ('c_minus', models.PositiveIntegerField(db_column='CMINUS')),
                ('d_plus', models.PositiveIntegerField(db_column='DPLUS')),
                ('d', models.PositiveIntegerField(db_column='D')),
                ('d_minus', models.PositiveIntegerField(db_column='DMINUS')),
                ('f', models.PositiveIntegerField(db_column='F')),
                ('w', models.PositiveIntegerField(db_column='W')),
                ('other', models.PositiveIntegerField(db_column='OTHER')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.course')),
                ('professor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='home.professor')),
            ],
            options={
                'default_manager_name': 'unfiltered',
            },
            managers=[
                ('unfiltered', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Gened',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=4)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.course')),
            ],
        ),
        migrations.AddField(
            model_name='course',
            name='professors',
            field=models.ManyToManyField(blank=True, through='home.ProfessorCourse', to='home.Professor'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['status'], name='home_review_status_358306_idx'),
        ),
        migrations.AddIndex(
            model_name='professorcourse',
            index=models.Index(fields=['recent_semester'], name='home_profes_recent__7fe73e_idx'),
        ),
        migrations.AddIndex(
            model_name='grade',
            index=models.Index(fields=['semester'], name='home_grade_semeste_7037cd_idx'),
        ),
        migrations.AddIndex(
            model_name='grade',
            index=models.Index(fields=['section'], name='home_grade_section_6e3ca4_idx'),
        ),
        migrations.AddConstraint(
            model_name='grade',
            constraint=models.UniqueConstraint(fields=('course', 'semester', 'section'), name='unique_course_semester_section'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['name'], name='home_course_name_60420f_idx'),
        ),
        migrations.AddConstraint(
            model_name='course',
            constraint=models.UniqueConstraint(fields=('name',), name='unique_name'),
        ),
    ]
